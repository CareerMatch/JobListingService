name: CI Workflow

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      # Step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # Step 3: Install SonarCloud Scanner
      - name: Install SonarCloud Scanner
        run: |
          dotnet tool uninstall --global dotnet-sonarscanner || true
          dotnet tool install --global dotnet-sonarscanner --version 5.12.0

      # Step 4: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore JoblistingService.sln

      # Step 5: Build the application
      - name: Build the application
        run: dotnet build JoblistingService.sln --no-restore --configuration Release

      # Step 6: Run tests
      - name: Run tests
        run: |
          dotnet test JoblistingService.Test/JoblistingService.Test.csproj \
            --collect:"XPlat Code Coverage" \
            --results-directory "JoblistingService.Test/TestResults" \
            /p:CoverletOutput=JoblistingService.Test/TestResults/coverage.cobertura.xml \
            /p:CoverletOutputFormat=cobertura

      # Step 7: Begin SonarCloud Analysis
      - name: SonarCloud Begin Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"CareerMatch_JobListingService" \
            /o:"careermatch" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cobertura.reportPaths="JoblistingService.Test/TestResults/**/coverage.cobertura.xml"

      # Step 8: Build for SonarCloud Analysis
      - name: Build for SonarCloud Analysis
        run: dotnet build JoblistingService.sln --no-restore --configuration Release

      # Step 9: SonarCloud Analysis - End
      - name: SonarCloud End Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end

      # Step 10: Cleanup test results
      - name: Cleanup TestResults folder and coverage files
        run: |
          rm -rf JoblistingService.Test/TestResults