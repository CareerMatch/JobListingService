name: CI Workflow

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full clone for accurate SonarCloud analysis

      # Step 2: Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore JoblistingService.sln

      # Step 4: Build the application
      - name: Build the application
        run: dotnet build JoblistingService.sln --no-restore --configuration Release

      # Step 5: Run tests
      - name: Run tests
        run: |
          dotnet test JoblistingService.Test/JoblistingService.Test.csproj \
            --collect:"XPlat Code Coverage" \
            --results-directory "JoblistingService.Test/TestResults" \
            /p:CoverletOutput=JoblistingService.Test/TestResults/coverage.cobertura.xml \
            /p:CoverletOutputFormat=cobertura

      # Step 6: SonarCloud Analysis with highbyte/sonarscan-dotnet
      - name: SonarCloud Analysis with Secrets
        uses: highbyte/sonarscan-dotnet@v2.3.2
        with:
          sonarProjectKey: "CareerMatch_JobListingService" # Replace with your SonarCloud project key
          sonarProjectName: "CareerMatch JobListing Service" # Replace with your SonarCloud project name
          sonarHostname: "https://sonarcloud.io" # URL for SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 7: Cleanup test results
      - name: Cleanup TestResults folder and coverage files
        run: |
          rm -rf JoblistingService.Test/TestResults